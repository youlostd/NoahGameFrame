#ifndef METIN2_GAME_CONSTANTS_HPP
#define METIN2_GAME_CONSTANTS_HPP

#include <Config.hpp>

#if VSTD_HAS_PRAGMA_ONCE
#pragma once
#endif

#include <storm/String.hpp>
#include <optional>

enum EMisc
{
	OPENID_AUTHKEY_LEN = 32,
	SHOP_TAB_NAME_MAX = 32,
	SHOP_TAB_COUNT_MAX = 15,
#ifdef ENABLE_PRIVATESHOP_SEARCH_SYSTEM
	SHOPSEARCH_ITEM_NAME_MAX_LEN = 30,
#endif

	SAFEBOX_PAGE_WIDTH = 5,
	SAFEBOX_PAGE_HEIGHT = 9,
	SAFEBOX_PAGE_SIZE = SAFEBOX_PAGE_WIDTH * SAFEBOX_PAGE_HEIGHT,


	MAX_HOST_LENGTH = 15,
	IP_ADDRESS_LENGTH = 15,
	LOGIN_MAX_LEN = 30,
	HWID_MAX_LEN = 64,
	PASSWD_MAX_LEN = 16,
	TEAM_KEY_LEN = 64,
	MAX_HGUARD_DATA_LENGTH = 256,
	MAX_HGUARD_CODE_LENGTH = 6,
	PLAYER_PER_ACCOUNT = 5,
	ACCOUNT_STATUS_MAX_LEN = 30,
	ACCOUNT_LANG_MAX_LEN = 3,
	CHARACTER_NAME_MAX_LEN = 36,
	PLAYER_NAME_MAX_LEN = 24,
	SHOP_SIGN_MAX_LEN = 32,
	MAX_MAPS_PER_GAME = 32,
	LOCALE_NAME_MAX_LEN = 8,
	PRIVATE_CODE_LENGTH = 8,


	ABILITY_MAX_NUM = 50,
	BANWORD_MAX_LEN = 24,
	SMS_MAX_LEN = 80,
	MOBILE_MAX_LEN = 32,
	SOCIAL_ID_MAX_LEN = 18,

	GUILD_NAME_MAX_LEN = 22,

	SHOP_HOST_ITEM_MAX_NUM = 90,	/* È£½ºÆ®ÀÇ ÃÖ´ë ¾ÆÀÌÅÛ °³¼ö */
	SHOP_GUEST_ITEM_MAX_NUM = 18,	/* °Ô½ºÆ®ÀÇ ÃÖ´ë ¾ÆÀÌÅÛ °³¼ö */

	SHOP_PRICELIST_MAX_NUM = 40,	///< °³ÀÎ»óÁ¡ °¡°ÝÁ¤º¸ ¸®½ºÆ®¿¡¼­ À¯ÁöÇÒ °¡°ÝÁ¤º¸ÀÇ ÃÖ´ë °¹¼ö

	CHAT_MAX_LEN = 4096,

	QUICKSLOT_MAX_NUM = 36,

	JOURNAL_MAX_NUM = 2,

	QUERY_MAX_LEN = 8192,

	FILE_MAX_LEN = 128,

	PET_MAX_LEVEL = 100,
	PLAYER_EXP_TABLE_MAX = 170,
	PLAYER_MAX_LEVEL_CONST = 170,

	GUILD_MAX_LEVEL = 20,

	SPECIAL_CHANNEL_EVENT = 99,
	SPECIAL_CHANNEL_DEFAULT = 1,

	ATTRIBUTE_MAX_VALUE = 20,
	CHARACTER_PATH_MAX_NUM = 64,

	APPLY_NAME_MAX_LEN = 32,
	EVENT_FLAG_NAME_MAX_LEN = 32,

	MOB_SKILL_MAX_NUM = 5,

	PET_NAME_MAX_CHARACTERS = 32,

	POINT_MAX_NUM = 255,
	DRAGON_SOUL_BOX_SIZE = 32,
	DRAGON_SOUL_BOX_COLUMN_NUM = 8,
	DRAGON_SOUL_BOX_ROW_NUM = DRAGON_SOUL_BOX_SIZE / DRAGON_SOUL_BOX_COLUMN_NUM,
	DRAGON_SOUL_REFINE_GRID_SIZE = 15,
	MAX_AMOUNT_OF_MALL_BONUS = 20,

	QUICKSLOT_MAX_LINE = 4,
	QUICKSLOT_MAX_COUNT_PER_LINE = 8,
	QUICKSLOT_MAX_COUNT = QUICKSLOT_MAX_LINE * QUICKSLOT_MAX_COUNT_PER_LINE,

	WEDDING_DRESS_SHAPE = 201,
	WEDDING_DRESS_SHAPE2 = 202,
	BLOCK_DESC_MAX_LEN = 128,
	BLOCK_PROOF_MAX_LEN = 256,
	HGUARD_MAX_ID_LEN = 120,
	METIN_SOCKET_COUNT = 6,
	QUEST_INPUT_STRING_LONG_MAX_NUM = 512,
	QUEST_INPUT_STRING_MAX_NUM = 64,

	HYDRA_RUN_MAP_INDEX = 227,
	HYDRA_WAIT_MAP_INDEX = 228,
	DRAGON_CAPE_MAP_INDEX = 22,

	OXEVENT_MAP_INDEX = 113,
	TEST_MAP_INDEX = 113,

	SAFEBOX_MAX_NUM = 135,
	SAFEBOX_PASSWORD_MAX_LEN = 6,

};

typedef enum
{
	SHOP_COIN_TYPE_GOLD, // DEFAULT VALUE
	SHOP_COIN_TYPE_SECONDARY_COIN,
	SHOP_COIN_TYPE_CASH,
} EShopCoinType;

enum GuildWarStatus {
	GUILD_WAR_RESULT_OK,
	GUILD_WAR_RESULT_UNDETERMINED,
	GUILD_WAR_RESULT_TIMEOUT = 99,
};

enum EDSInventoryMaxNum7
{
	DS_REFINE_WINDOW_MAX_NUM = 15,
};

enum EEmpire
{
	EMPIRE_NONE,
	EMPIRE_A = 1,
	EMPIRE_B = 2,
	EMPIRE_C = 3,
	EMPIRE_SHINSU = 1,
	EMPIRE_CHUNJO = 2,
	EMPIRE_JINNO = 3,
	EMPIRE_MAX_NUM,
};

enum ESex
{
	SEX_MALE,
	SEX_FEMALE,

	SEX_COUNT
};

enum EDirection
{
	DIR_NORTH,
	DIR_NORTHEAST,
	DIR_EAST,
	DIR_SOUTHEAST,
	DIR_SOUTH,
	DIR_SOUTHWEST,
	DIR_WEST,
	DIR_NORTHWEST,
	DIR_MAX_NUM
};

enum ECharType
{
	CHAR_TYPE_MONSTER,
	CHAR_TYPE_NPC,
	CHAR_TYPE_STONE,
	CHAR_TYPE_WARP,
	CHAR_TYPE_DOOR,
	CHAR_TYPE_BUILDING,
	CHAR_TYPE_PC,
	CHAR_TYPE_POLYMORPH_PC,
	CHAR_TYPE_HORSE,
	CHAR_TYPE_GOTO,
	CHAR_TYPE_SHOP,
	CHAR_TYPE_PET,
	CHAR_TYPE_MOUNT,
	CHAR_TYPE_GROWTH_PET,
	CHAR_TYPE_BUFFBOT,
	CHAR_TYPE_ATTACK_PET,
};

#define ABILITY_MAX_LEVEL	10  /* 기술 최대 레벨 */

enum EAbilityDifficulty
{
	DIFFICULTY_EASY,
	DIFFICULTY_NORMAL,
	DIFFICULTY_HARD,
	DIFFICULTY_VERY_HARD,
	DIFFICULTY_NUM_TYPES
};

enum EAbilityCategory
{
	CATEGORY_PHYSICAL,	/* 신체적 어빌리티 */
	CATEGORY_MENTAL,	/* 정신적 어빌리티 */
	CATEGORY_ATTRIBUTE,	/* 능력 어빌리티 */
	CATEGORY_NUM_TYPES
};

enum EJobs
{
	JOB_WARRIOR,
	JOB_ASSASSIN,
	JOB_SURA,
	JOB_SHAMAN,
	JOB_WOLFMAN,
	JOB_MAX_NUM
};

enum GMLanguage {
	GM_LANGUAGE_HU = (1 << 0),
	GM_LANGUAGE_PL = (1 << 1),
	GM_LANGUAGE_CZ = (1 << 2),
	GM_LANGUAGE_DE = (1 << 3),
	GM_LANGUAGE_RO = (1 << 4),
	GM_LANGUAGE_TR = (1 << 5),
	GM_LANGUAGE_ES = (1 << 6),
	GM_LANGUAGE_EN = (1 << 7),
	GM_LANGUAGE_PT = (1 << 8),
	GM_LANGUAGE_IT = (1 << 9),
};

enum MainRace
{
	MAIN_RACE_WARRIOR_M,
	MAIN_RACE_ASSASSIN_W,
	MAIN_RACE_SURA_M,
	MAIN_RACE_SHAMAN_W,
	MAIN_RACE_WARRIOR_W,
	MAIN_RACE_ASSASSIN_M,
	MAIN_RACE_SURA_W,
	MAIN_RACE_SHAMAN_M,
	MAIN_RACE_WOLFMAN_M,
	MAIN_RACE_MAX_NUM,
};

enum
{
	MAIN_RACE_MOB_WARRIOR_M = 12015,
	MAIN_RACE_MOB_ASSASSIN_W,
	MAIN_RACE_MOB_SURA_M,
	MAIN_RACE_MOB_SHAMAN_W,
	MAIN_RACE_MOB_WARRIOR_W,
	MAIN_RACE_MOB_ASSASSIN_M,
	MAIN_RACE_MOB_SURA_W,
	MAIN_RACE_MOB_SHAMAN_M,
#ifdef __WOLFMAN__
	MAIN_RACE_MOB_WOLFMAN_M,
	MAIN_RACE_MOB_MAX_NUM = MAIN_RACE_MOB_WOLFMAN_M,
#else
	MAIN_RACE_MOB_MAX_NUM = MAIN_RACE_MOB_SHAMAN_M,
#endif
};

enum ELoads
{
	LOAD_NONE,
	LOAD_LIGHT,
	LOAD_NORMAL,
	LOAD_HEAVY,
	LOAD_MASSIVE
};

enum
{
	QUICKSLOT_TYPE_NONE,
	QUICKSLOT_TYPE_ITEM,
	QUICKSLOT_TYPE_SKILL,
	QUICKSLOT_TYPE_COMMAND,
	QUICKSLOT_TYPE_MAX_NUM,
};

enum EParts
{
	PART_MAIN,
	PART_WEAPON,
	PART_HEAD,
	PART_WEAPON_LEFT,
	PART_HAIR,
	PART_ACCE,
	PART_BODY_EFFECT,
	PART_WEAPON_EFFECT,
	PART_WING_EFFECT,
	PART_ARROW,
	PART_RANK,
	PART_TALISMAN,
	PART_MAX_NUM,
	PART_WEAPON_SUB,
};

enum EChatType
{
	CHAT_TYPE_TALKING,
	CHAT_TYPE_INFO,
	CHAT_TYPE_NOTICE,
	CHAT_TYPE_PARTY,
	CHAT_TYPE_GUILD,
	CHAT_TYPE_COMMAND,
	CHAT_TYPE_SHOUT,
	CHAT_TYPE_WHISPER,
	CHAT_TYPE_BIG_NOTICE,
	CHAT_TYPE_DICE_INFO,
	CHAT_TYPE_BIG_CONTROL,
	CHAT_TYPE_MISSION,
	CHAT_TYPE_SUB_MISSION,
	CHAT_TYPE_TEAM, // NEW CHAT TYPE
	CHAT_TYPE_EMPIRE,
	CHAT_TYPE_MAX_NUM
};

enum ENoticeType
{
	NOTICE_TYPE_DEFAULT,
	NOTICE_TYPE_BIG,
	NOTICE_TYPE_FORMATTED,
	NOTICE_TYPE_WHISPER,
	NOTICE_TYPE_MAX,
};

enum EWhisperType
{
	WHISPER_TYPE_NORMAL = 0,
	WHISPER_TYPE_NOT_EXIST = 1,
	WHISPER_TYPE_TARGET_BLOCKED = 2,
	WHISPER_TYPE_SENDER_BLOCKED = 3,
	WHISPER_TYPE_ERROR = 4,
	WHISPER_TYPE_GM = 5,
	WHISPER_TYPE_SYSTEM = 0xFF
};

enum ECharacterPosition
{
	POSITION_GENERAL,
	POSITION_BATTLE,
	POSITION_DYING,
	POSITION_SITTING_CHAIR,
	POSITION_SITTING_GROUND,
	POSITION_INTRO,
	POSITION_MAX_NUM
};

enum EPositions
{
	POS_DEAD,
	POS_SLEEPING,
	POS_RESTING,
	POS_SITTING,
	POS_FISHING,
	POS_FIGHTING,
	POS_MOUNTING,
	POS_STANDING
};

enum EGMLevels
{
	GM_PLAYER,
	GM_LOW_WIZARD,
	GM_WIZARD,
	GM_HIGH_WIZARD,
	GM_GOD,
	GM_IMPLEMENTOR,
	GM_MAX_NUM
};

enum EPointTypes
{
	POINT_NONE,
	// 0
	POINT_LEVEL,
	// 1
	POINT_VOICE,
	// 2
	POINT_EXP,
	// 3
	POINT_NEXT_EXP,
	// 4
	POINT_HP,
	// 5
	POINT_MAX_HP,
	// 6
	POINT_SP,
	// 7
	POINT_MAX_SP,
	// 8  
	POINT_STAMINA,
	// 9  ½ºÅ×¹Ì³Ê
	POINT_MAX_STAMINA,
	// 10 ÃÖ´ë ½ºÅ×¹Ì³Ê
	POINT_GOLD,
	// 11
	POINT_ST = 12,
	// 12 ±Ù·Â
	POINT_HT,
	// 13 Ã¼·Â
	POINT_DX,
	// 14 ¹ÎÃ¸¼º
	POINT_IQ,
	// 15 Á¤½Å·Â
	POINT_DEF_GRADE,
	// 16 ...
	POINT_ATT_SPEED,
	// 17 °ø°Ý¼Óµµ
	POINT_ATT_GRADE,
	// 18 °ø°Ý·Â MAX
	POINT_MOV_SPEED,
	// 19 ÀÌµ¿¼Óµµ
	POINT_CLIENT_DEF_GRADE,
	// 20 ¹æ¾îµî±Þ
	POINT_CASTING_SPEED,
	// 21 ÁÖ¹®¼Óµµ (Äð´Ù¿îÅ¸ÀÓ*100) / (100 + ÀÌ°ª) = ÃÖÁ¾ Äð´Ù¿î Å¸ÀÓ
	POINT_MAGIC_ATT_GRADE,
	// 22 ¸¶¹ý°ø°Ý·Â
	POINT_MAGIC_DEF_GRADE,
	// 23 ¸¶¹ý¹æ¾î·Â
	POINT_EMPIRE_POINT,
	// 24 Á¦±¹Á¡¼ö
	POINT_LEVEL_STEP,
	// 25 ÇÑ ·¹º§¿¡¼­ÀÇ ´Ü°è.. (1 2 3 µÉ ¶§ º¸»ó, 4 µÇ¸é ·¹º§ ¾÷)
	POINT_STAT,
	// 26 ´É·ÂÄ¡ ¿Ã¸± ¼ö ÀÖ´Â °³¼ö
	POINT_SUB_SKILL,
	// 27 º¸Á¶ ½ºÅ³ Æ÷ÀÎÆ®
	POINT_SKILL,
	// 28 ¾×Æ¼ºê ½ºÅ³ Æ÷ÀÎÆ®
	POINT_WEAPON_MIN,
	// 29 ¹«±â ÃÖ¼Ò µ¥¹ÌÁö
	POINT_WEAPON_MAX,
	// 30 ¹«±â ÃÖ´ë µ¥¹ÌÁö
	POINT_PLAYTIME,
	// 31 ÇÃ·¹ÀÌ½Ã°£
	POINT_HP_REGEN,
	// 32 HP È¸º¹·ü
	POINT_SP_REGEN,
	// 33 SP È¸º¹·ü

	POINT_BOW_DISTANCE,
	// 34 È° »çÁ¤°Å¸® Áõ°¡Ä¡ (meter)

	POINT_HP_RECOVERY,
	// 35 Ã¼·Â È¸º¹ Áõ°¡·®
	POINT_SP_RECOVERY,
	// 36 Á¤½Å·Â È¸º¹ Áõ°¡·®

	POINT_POISON_PCT,
	// 37 µ¶ È®·ü
	POINT_STUN_PCT,
	// 38 ±âÀý È®·ü
	POINT_SLOW_PCT,
	// 39 ½½·Î¿ì È®·ü
	POINT_CRITICAL_PCT,
	// 40 Å©¸®Æ¼ÄÃ È®·ü
	POINT_PENETRATE_PCT,
	// 41 °üÅëÅ¸°Ý È®·ü
	POINT_CURSE_PCT,
	// 42 ÀúÁÖ È®·ü

	POINT_ATTBONUS_HUMAN,
	// 43 ÀÎ°£¿¡°Ô °­ÇÔ
	POINT_ATTBONUS_ANIMAL,
	// 44 µ¿¹°¿¡°Ô µ¥¹ÌÁö % Áõ°¡
	POINT_ATTBONUS_ORC,
	// 45 ¿õ±Í¿¡°Ô µ¥¹ÌÁö % Áõ°¡
	POINT_ATTBONUS_MILGYO,
	// 46 ¹Ð±³¿¡°Ô µ¥¹ÌÁö % Áõ°¡
	POINT_ATTBONUS_UNDEAD,
	// 47 ½ÃÃ¼¿¡°Ô µ¥¹ÌÁö % Áõ°¡
	POINT_ATTBONUS_DEVIL,
	// 48 ¸¶±Í(¾Ç¸¶)¿¡°Ô µ¥¹ÌÁö % Áõ°¡
	POINT_ATTBONUS_INSECT,
	// 49 ¹ú·¹Á·
	POINT_ATTBONUS_FIRE,
	// 50 È­¿°Á·
	POINT_ATTBONUS_ICE,
	// 51 ºù¼³Á·
	POINT_ATTBONUS_DESERT,
	// 52 »ç¸·Á·
	POINT_ATTBONUS_MONSTER,
	// 53 ¸ðµç ¸ó½ºÅÍ¿¡°Ô °­ÇÔ
	POINT_ATTBONUS_WARRIOR,
	// 54 ¹«»ç¿¡°Ô °­ÇÔ
	POINT_ATTBONUS_ASSASSIN,
	// 55 ÀÚ°´¿¡°Ô °­ÇÔ
	POINT_ATTBONUS_SURA,
	// 56 ¼ö¶ó¿¡°Ô °­ÇÔ
	POINT_ATTBONUS_SHAMAN,
	// 57 ¹«´ç¿¡°Ô °­ÇÔ

	POINT_RESIST_WARRIOR,
	// 59 ¹«»ç¿¡°Ô ÀúÇ×
	POINT_RESIST_ASSASSIN,
	// 60 ÀÚ°´¿¡°Ô ÀúÇ×
	POINT_RESIST_SURA,
	// 61 ¼ö¶ó¿¡°Ô ÀúÇ×
	POINT_RESIST_SHAMAN,
	// 62 ¹«´ç¿¡°Ô ÀúÇ×

	POINT_STEAL_HP,
	// 63 »ý¸í·Â Èí¼ö
	POINT_STEAL_SP,
	// 64 Á¤½Å·Â Èí¼ö

	POINT_MANA_BURN_PCT,
	// 65 ¸¶³ª ¹ø

	/// ÇÇÇØ½Ã º¸³Ê½º ///

	POINT_DAMAGE_SP_RECOVER,
	// 66 °ø°Ý´çÇÒ ½Ã Á¤½Å·Â È¸º¹ È®·ü

	POINT_BLOCK,
	// 67 ºí·°À²
	POINT_DODGE,
	// 68 È¸ÇÇÀ²

	POINT_RESIST_SWORD,
	// 69
	POINT_RESIST_TWOHAND,
	// 70
	POINT_RESIST_DAGGER,
	// 71
	POINT_RESIST_BELL,
	// 72
	POINT_RESIST_FAN,
	// 73
	POINT_RESIST_BOW,
	// 74  È­»ì   ÀúÇ×   : ´ë¹ÌÁö °¨¼Ò
	POINT_RESIST_FIRE,
	// 75  È­¿°   ÀúÇ×   : È­¿°°ø°Ý¿¡ ´ëÇÑ ´ë¹ÌÁö °¨¼Ò
	POINT_RESIST_ELEC,
	// 76  Àü±â   ÀúÇ×   : Àü±â°ø°Ý¿¡ ´ëÇÑ ´ë¹ÌÁö °¨¼Ò
	POINT_RESIST_MAGIC,
	// 77  ¼ú¹ý   ÀúÇ×   : ¸ðµç¼ú¹ý¿¡ ´ëÇÑ ´ë¹ÌÁö °¨¼Ò
	POINT_RESIST_WIND,
	// 78  ¹Ù¶÷   ÀúÇ×   : ¹Ù¶÷°ø°Ý¿¡ ´ëÇÑ ´ë¹ÌÁö °¨¼Ò

	POINT_REFLECT_MELEE,
	// 79 °ø°Ý ¹Ý»ç

	/// Æ¯¼ö ÇÇÇØ½Ã ///
	POINT_REFLECT_CURSE,
	// 80 ÀúÁÖ ¹Ý»ç
	POINT_POISON_REDUCE,
	// 81 µ¶µ¥¹ÌÁö °¨¼Ò

	/// Àû ¼Ò¸ê½Ã ///
	POINT_KILL_SP_RECOVER,
	// 82 Àû ¼Ò¸ê½Ã MP È¸º¹
	POINT_EXP_DOUBLE_BONUS,
	// 83
	POINT_GOLD_DOUBLE_BONUS,
	// 84
	POINT_ITEM_DROP_BONUS,
	// 85

	/// È¸º¹ °ü·Ã ///
	POINT_POTION_BONUS,
	// 86
	POINT_KILL_HP_RECOVERY,
	// 87

	POINT_IMMUNE_STUN,
	// 88
	POINT_IMMUNE_SLOW,
	// 89
	POINT_IMMUNE_FALL,
	// 90
	//////////////////

	POINT_PARTY_ATTACKER_BONUS,
	// 91
	POINT_PARTY_TANKER_BONUS,
	// 92

	POINT_ATT_BONUS,
	// 93
	POINT_DEF_BONUS,
	// 94

	POINT_ATT_GRADE_BONUS,
	// 95
	POINT_DEF_GRADE_BONUS,
	// 96
	POINT_MAGIC_ATT_GRADE_BONUS,
	// 97
	POINT_MAGIC_DEF_GRADE_BONUS,
	// 98

	POINT_RESIST_NORMAL_DAMAGE,
	// 99

	POINT_HIT_HP_RECOVERY,
	// 100
	POINT_HIT_SP_RECOVERY,
	// 101
	POINT_MANASHIELD,
	// 102 Èæ½Å¼öÈ£ ½ºÅ³¿¡ ÀÇÇÑ ¸¶³ª½¯µå È¿°ú Á¤µµ

	POINT_PARTY_BUFFER_BONUS,
	// 103
	POINT_PARTY_SKILL_MASTER_BONUS,
	// 104

	POINT_HP_RECOVER_CONTINUE,
	// 105
	POINT_SP_RECOVER_CONTINUE,
	// 106

	POINT_STEAL_GOLD,
	// 107 
	POINT_POLYMORPH,
	// 108 º¯½ÅÇÑ ¸ó½ºÅÍ ¹øÈ£
	POINT_MOUNT,
	// 109 Å¸°íÀÖ´Â ¸ó½ºÅÍ ¹øÈ£

	POINT_PARTY_HASTE_BONUS,
	// 110
	POINT_PARTY_DEFENDER_BONUS,
	// 111
	POINT_STAT_RESET_COUNT,
	// 112 ÇÇÀÇ ´Ü¾à »ç¿ëÀ» ÅëÇÑ ½ºÅÝ ¸®¼Â Æ÷ÀÎÆ® (1´ç 1Æ÷ÀÎÆ® ¸®¼Â°¡´É)

	POINT_HORSE_SKILL,
	// 113

	POINT_MALL_ATTBONUS,
	// 114 °ø°Ý·Â +x%
	POINT_MALL_DEFBONUS,
	// 115 ¹æ¾î·Â +x%
	POINT_MALL_EXPBONUS,
	// 116 °æÇèÄ¡ +x%
	POINT_MALL_ITEMBONUS,
	// 117 ¾ÆÀÌÅÛ µå·ÓÀ² x/10¹è
	POINT_MALL_GOLDBONUS,
	// 118 µ· µå·ÓÀ² x/10¹è

	POINT_MAX_HP_PCT,
	// 119 ÃÖ´ë»ý¸í·Â +x%
	POINT_MAX_SP_PCT,
	// 120 ÃÖ´ëÁ¤½Å·Â +x%

	POINT_SKILL_DAMAGE_BONUS,
	// 121 ½ºÅ³ µ¥¹ÌÁö *(100+x)%
	POINT_NORMAL_HIT_DAMAGE_BONUS,
	// 122 ÆòÅ¸ µ¥¹ÌÁö *(100+x)%

	// DEFEND_BONUS_ATTRIBUTES
	POINT_SKILL_DEFEND_BONUS,
	// 123 ½ºÅ³ ¹æ¾î µ¥¹ÌÁö
	POINT_NORMAL_HIT_DEFEND_BONUS,
	// 124 ÆòÅ¸ ¹æ¾î µ¥¹ÌÁö
	// END_OF_DEFEND_BONUS_ATTRIBUTES

	// PC_BANG_ITEM_ADD 
	POINT_PC_BANG_EXP_BONUS,
	// 125 PC¹æ Àü¿ë °æÇèÄ¡ º¸³Ê½º
	POINT_PC_BANG_DROP_BONUS,
	// 126 PC¹æ Àü¿ë µå·Ó·ü º¸³Ê½º
	// END_PC_BANG_ITEM_ADD
	POINT_RAMADAN_CANDY_BONUS_EXP,
	// ¶ó¸¶´Ü »çÅÁ °æÇèÄ¡ Áõ°¡¿ë

	POINT_ENERGY = 128,
	// 128 ±â·Â

	// ±â·Â ui ¿ë.
	// ¼­¹ö¿¡¼­ ¾²Áö ¾Ê±â¸¸, Å¬¶óÀÌ¾ðÆ®¿¡¼­ ±â·ÂÀÇ ³¡ ½Ã°£À» POINT·Î °ü¸®ÇÏ±â ¶§¹®¿¡ ÀÌ·¸°Ô ÇÑ´Ù.
	// ¾Æ ºÎ²ô·´´Ù
	POINT_ENERGY_END_TIME = 129,
	// 129 ±â·Â Á¾·á ½Ã°£

	POINT_COSTUME_ATTR_BONUS = 130,
	POINT_MAGIC_ATT_BONUS_PER = 131,
	POINT_MELEE_MAGIC_ATT_BONUS_PER = 132,

	// Ãß°¡ ¼Ó¼º ÀúÇ×
	POINT_RESIST_ICE = 133,
	//   ³Ã±â ÀúÇ×   : ¾óÀ½°ø°Ý¿¡ ´ëÇÑ ´ë¹ÌÁö °¨¼Ò
	POINT_RESIST_EARTH = 134,
	//   ´ëÁö ÀúÇ×   : ¾óÀ½°ø°Ý¿¡ ´ëÇÑ ´ë¹ÌÁö °¨¼Ò
	POINT_RESIST_DARK = 135,
	//   ¾îµÒ ÀúÇ×   : ¾óÀ½°ø°Ý¿¡ ´ëÇÑ ´ë¹ÌÁö °¨¼Ò

	POINT_RESIST_CRITICAL = 136,
	// Å©¸®Æ¼ÄÃ ÀúÇ×	: »ó´ëÀÇ Å©¸®Æ¼ÄÃ È®·üÀ» °¨¼Ò
	POINT_RESIST_PENETRATE = 137,
	// °üÅëÅ¸°Ý ÀúÇ×	: »ó´ëÀÇ °üÅëÅ¸°Ý È®·üÀ» °¨¼Ò

	// New DD bonuses
	POINT_BOOST_CRITICAL = 138,
	POINT_BOOST_PENETRATE = 139,

	//Think 05/04/14 - New arrow bonuses
	POINT_FREEZE_PCT = 140,
	POINT_LASTING_FIRE_PCT = 141,

	POINT_BLEEDING_PCT = 142,
	POINT_BLEEDING_REDUCE = 143,

	POINT_ATTBONUS_WOLFMAN = 144,
	POINT_RESIST_WOLFMAN = 145,
	POINT_RESIST_CLAW = 146,
	POINT_ACCEDRAIN_RATE = 147,
	POINT_ATTBONUS_METIN = 148,
	POINT_ATTBONUS_TRENT = 149,
	POINT_ATTBONUS_BOSS = 150,
	//POINT_MAX_NUM = 129	common/length.h
	POINT_RESIST_HUMAN = 151,
	POINT_ENCHANT_ELECT,
	POINT_ENCHANT_FIRE,
	POINT_ENCHANT_ICE,
	POINT_ENCHANT_WIND,
	POINT_ENCHANT_EARTH,
	POINT_ENCHANT_DARK,
	POINT_ATTBONUS_CZ,
	POINT_ATTBONUS_LEGEND,
	POINT_SKILLTREE_POINTS,


#ifdef ENABLE_BATTLE_PASS
	POINT_BATTLE_PASS_ID,
#endif

	POINT_CASH,
	POINT_ATTBONUS_SHADOW,

	POINT_MIN_WEP = 200,
	POINT_MAX_WEP,
	POINT_MIN_MAGIC_WEP,
	POINT_MAX_MAGIC_WEP,
	POINT_HIT_RATE,
};

enum EApplyTypes
{
	APPLY_NONE,			// 0
	APPLY_MAX_HP,		// 1
	APPLY_MAX_SP,		// 2
	APPLY_CON,			// 3
	APPLY_INT,			// 4
	APPLY_STR,			// 5
	APPLY_DEX,			// 6
	APPLY_ATT_SPEED,	// 7
	APPLY_MOV_SPEED,	// 8
	APPLY_CAST_SPEED,	// 9
	APPLY_HP_REGEN,		// 10
	APPLY_SP_REGEN,		// 11
	APPLY_POISON_PCT,	// 12
	APPLY_STUN_PCT,		// 13
	APPLY_SLOW_PCT,		// 14
	APPLY_CRITICAL_PCT,		// 15
	APPLY_PENETRATE_PCT,	// 16
	APPLY_ATTBONUS_HUMAN,	// 17
	APPLY_ATTBONUS_ANIMAL,	// 18
	APPLY_ATTBONUS_ORC,		// 19
	APPLY_ATTBONUS_MILGYO,	// 20
	APPLY_ATTBONUS_UNDEAD,	// 21
	APPLY_ATTBONUS_DEVIL,	// 22
	APPLY_STEAL_HP,			// 23
	APPLY_STEAL_SP,			// 24
	APPLY_MANA_BURN_PCT,	// 25
	APPLY_DAMAGE_SP_RECOVER,	// 26
	APPLY_BLOCK,			// 27
	APPLY_DODGE,			// 28
	APPLY_RESIST_SWORD,		// 29
	APPLY_RESIST_TWOHAND,	// 30
	APPLY_RESIST_DAGGER,	// 31
	APPLY_RESIST_BELL,		// 32
	APPLY_RESIST_FAN,		// 33
	APPLY_RESIST_BOW,		// 34
	APPLY_RESIST_FIRE,		// 35
	APPLY_RESIST_ELEC,		// 36
	APPLY_RESIST_MAGIC,		// 37
	APPLY_RESIST_WIND,		// 38
	APPLY_REFLECT_MELEE,	// 39
	APPLY_REFLECT_CURSE,	// 40
	APPLY_POISON_REDUCE,	// 41
	APPLY_KILL_SP_RECOVER,	// 42
	APPLY_EXP_DOUBLE_BONUS,	// 43
	APPLY_GOLD_DOUBLE_BONUS,	// 44
	APPLY_ITEM_DROP_BONUS,	// 45
	APPLY_POTION_BONUS,		// 46
	APPLY_KILL_HP_RECOVER,	// 47
	APPLY_IMMUNE_STUN,		// 48
	APPLY_IMMUNE_SLOW,		// 49
	APPLY_IMMUNE_FALL,		// 50
	APPLY_SKILL,			// 51
	APPLY_BOW_DISTANCE,		// 52
	APPLY_ATT_GRADE_BONUS,	// 53
	APPLY_DEF_GRADE_BONUS,	// 54
	APPLY_MAGIC_ATT_GRADE,	// 55
	APPLY_MAGIC_DEF_GRADE,	// 56
	APPLY_CURSE_PCT,		// 57
	APPLY_MAX_STAMINA,		// 58
	APPLY_ATTBONUS_WARRIOR,	// 59
	APPLY_ATTBONUS_ASSASSIN,	// 60
	APPLY_ATTBONUS_SURA,	// 61
	APPLY_ATTBONUS_SHAMAN,	// 62
	APPLY_ATTBONUS_MONSTER,	// 63
	APPLY_MALL_ATTBONUS,			// 64 °ø°Ý·Â +x%
	APPLY_MALL_DEFBONUS,			// 65 ¹æ¾î·Â +x%
	APPLY_MALL_EXPBONUS,			// 66 °æÇèÄ¡ +x%
	APPLY_MALL_ITEMBONUS,			// 67 ¾ÆÀÌÅÛ µå·ÓÀ² x/10¹è
	APPLY_MALL_GOLDBONUS,			// 68 µ· µå·ÓÀ² x/10¹è
	APPLY_MAX_HP_PCT,				// 69 ÃÖ´ë »ý¸í·Â +x%
	APPLY_MAX_SP_PCT,				// 70 ÃÖ´ë Á¤½Å·Â +x%
	APPLY_SKILL_DAMAGE_BONUS,		// 71 ½ºÅ³ µ¥¹ÌÁö * (100+x)%
	APPLY_NORMAL_HIT_DAMAGE_BONUS,	// 72 ÆòÅ¸ µ¥¹ÌÁö * (100+x)%
	APPLY_SKILL_DEFEND_BONUS,		// 73 ½ºÅ³ µ¥¹ÌÁö ¹æ¾î * (100-x)%
	APPLY_NORMAL_HIT_DEFEND_BONUS,	// 74 ÆòÅ¸ µ¥¹ÌÁö ¹æ¾î * (100-x)%
	APPLY_PC_BANG_EXP_BONUS,		// 75 PC¹æ ¾ÆÀÌÅÛ EXP º¸³Ê½º
	APPLY_PC_BANG_DROP_BONUS,		// 76 PC¹æ ¾ÆÀÌÅÛ µå·ÓÀ² º¸³Ê½º

	APPLY_EXTRACT_HP_PCT,			// 77 »ç¿ë½Ã HP ¼Ò¸ð

	APPLY_RESIST_WARRIOR,			// 78 ¹«»ç¿¡°Ô ÀúÇ×
	APPLY_RESIST_ASSASSIN,			// 79 ÀÚ°´¿¡°Ô ÀúÇ×
	APPLY_RESIST_SURA,				// 80 ¼ö¶ó¿¡°Ô ÀúÇ×
	APPLY_RESIST_SHAMAN,			// 81 ¹«´ç¿¡°Ô ÀúÇ×
	APPLY_ENERGY,					// 82 ±â·Â
	APPLY_DEF_GRADE,				// 83 ¹æ¾î·Â. DEF_GRADE_BONUS´Â Å¬¶ó¿¡¼­ µÎ¹è·Î º¸¿©Áö´Â ÀÇµµµÈ ¹ö±×(...)°¡ ÀÖ´Ù.
	APPLY_COSTUME_ATTR_BONUS,		// 84 ÄÚ½ºÆ¬ ¾ÆÀÌÅÛ¿¡ ºÙÀº ¼Ó¼ºÄ¡ º¸³Ê½º
	APPLY_MAGIC_ATTBONUS_PER,		// 85 ¸¶¹ý °ø°Ý·Â +x%
	APPLY_MELEE_MAGIC_ATTBONUS_PER,			// 86 ¸¶¹ý + ¹Ð¸® °ø°Ý·Â +x%

	APPLY_RESIST_ICE,		// 87 ³Ã±â ÀúÇ×
	APPLY_RESIST_EARTH,		// 88 ´ëÁö ÀúÇ×
	APPLY_RESIST_DARK,		// 89 ¾îµÒ ÀúÇ×

	APPLY_ANTI_CRITICAL_PCT,	//90 Å©¸®Æ¼ÄÃ ÀúÇ×
	APPLY_ANTI_PENETRATE_PCT,	//91 °üÅëÅ¸°Ý ÀúÇ×

	APPLY_BOOST_CRITICAL_DMG, //92. If you hit critical, your total damage is increased by X%
	APPLY_BOOST_PENETRATE_DMG, //93. If you pierce, your total damage is increased by X%
	APPLY_ATTBONUS_INSECT,	// 94

	APPLY_BLEEDING_PCT,	// 95
	APPLY_BLEEDING_REDUCE,	// 96
	APPLY_ATTBONUS_WOLFMAN,	// 97
	APPLY_RESIST_WOLFMAN,	// 98
	APPLY_RESIST_CLAW,	// 99
	APPLY_ACCEDRAIN_RATE,	// 100

	APPLY_ATTBONUS_METIN,	// 101
	APPLY_ATTBONUS_TRENT,	// 102
	APPLY_ATTBONUS_BOSS,	// 103

	APPLY_RESIST_HUMAN,
	APPLY_ENCHANT_ELECT,
	APPLY_ENCHANT_FIRE,
	APPLY_ENCHANT_ICE,
	APPLY_ENCHANT_WIND,
	APPLY_ENCHANT_EARTH,
	APPLY_ENCHANT_DARK,
	APPLY_ATTBONUS_DESERT,
	APPLY_ATTBONUS_CZ,
	APPLY_ATTBONUS_LEGEND,
    APPLY_ATTBONUS_SHADOW,
	MAX_APPLY_NUM,              // 
};

enum EOnIdleEvents
{
	ON_IDLE_NONE,
	ON_IDLE_GENERAL,
	ON_IDLE_MAX_NUM
};

enum EImmuneFlags
{
	IMMUNE_STUN = (1 << 0),
	IMMUNE_SLOW = (1 << 1),
	IMMUNE_FALL = (1 << 2),
	IMMUNE_CURSE = (1 << 3),
	IMMUNE_POISON = (1 << 4),
	IMMUNE_TERROR = (1 << 5),
	IMMUNE_REFLECT = (1 << 6),
	IMMUNE_BLEEDING = (1 << 7),
	IMMUNE_FLAG_MAX_NUM = 8,
};

enum GuildLimits
{
	GUILD_GRADE_NAME_MAX_LEN = 8,
	GUILD_GRADE_COUNT = 15,
	GUILD_COMMENT_MAX_COUNT = 12,
	GUILD_COMMENT_MAX_LEN = 50,
	GUILD_LEADER_GRADE = 1,
	GUILD_BASE_POWER = 400,
	GUILD_POWER_PER_SKILL_LEVEL = 200,
	GUILD_POWER_PER_LEVEL = 100,
	GUILD_MINIMUM_LEADERSHIP = 40,
	GUILD_WAR_MIN_MEMBER_COUNT = 8,
	GUILD_LADDER_POINT_PER_LEVEL = 1000,
	GUILD_CREATE_ITEM_VNUM = 70101,
};

enum GuildAuth : int64_t
{
	GUILD_AUTH_ADD_MEMBER = (1 << 0),
	GUILD_AUTH_REMOVE_MEMBER = (1 << 1),
	GUILD_AUTH_NOTICE = (1 << 2),
	GUILD_AUTH_USE_SKILL = (1 << 3),
	GUILD_AUTH_PUT_GOLD = (1 << 4),
	GUILD_AUTH_TAKE_GOLD = (1 << 5),
	GUILD_AUTH_USE_GS = (1 << 6),
	GUILD_AUTH_GS1_PUTITEM = (1 << 7),
	GUILD_AUTH_GS1_TAKEITEM = (1 << 8),
	GUILD_AUTH_GS2_PUTITEM = (1 << 9),
	GUILD_AUTH_GS2_TAKEITEM = (1 << 10),
	GUILD_AUTH_GS3_PUTITEM = (1 << 11),
	GUILD_AUTH_GS3_TAKEITEM = (1 << 12),
	GUILD_AUTH_GS4_PUTITEM = (1 << 13),
	GUILD_AUTH_GS4_TAKEITEM = (1 << 14),
	GUILD_AUTH_GS5_PUTITEM = (1 << 15),
	GUILD_AUTH_GS5_TAKEITEM = (1 << 16),
	GUILD_AUTH_GS6_PUTITEM = (1 << 17),
	GUILD_AUTH_GS6_TAKEITEM = (1 << 18),
	GUILD_AUTH_GS7_PUTITEM = (1 << 19),
	GUILD_AUTH_GS7_TAKEITEM = (1 << 20),
	GUILD_AUTH_GS8_PUTITEM = (1 << 21),
	GUILD_AUTH_GS8_TAKEITEM = (1 << 22),
	GUILD_AUTH_GS9_PUTITEM = (1 << 23),
	GUILD_AUTH_GS9_TAKEITEM = (1 << 24),
	GUILD_AUTH_GS10_PUTITEM = (1 << 25),
	GUILD_AUTH_GS10_TAKEITEM = (1 << 26),
	GUILD_AUTH_LOG = (1 << 27),
	GUILD_AUTH_MANAGE = (1 << 28),

};

enum EGuildWarType
{
	GUILD_WAR_TYPE_FIELD,
	GUILD_WAR_TYPE_BATTLE,
	GUILD_WAR_TYPE_FLAG,
	GUILD_WAR_TYPE_MAX_NUM
};

enum EGuildWarState
{
	GUILD_WAR_NONE,
	GUILD_WAR_SEND_DECLARE,
	GUILD_WAR_REFUSE,
	GUILD_WAR_RECV_DECLARE,
	GUILD_WAR_WAIT_START,
	GUILD_WAR_CANCEL,
	GUILD_WAR_ON_WAR,
	GUILD_WAR_END,
	GUILD_WAR_OVER,
	GUILD_WAR_RESERVE,

	GUILD_WAR_DURATION = 30 * 60, // 1시간
	GUILD_WAR_WIN_POINT = 1000,
	GUILD_WAR_LADDER_HALF_PENALTY_TIME = 12 * 60 * 60,
};

enum EPrivType
{
	PRIV_NONE,
	PRIV_ITEM_DROP,
	PRIV_GOLD_DROP,
	PRIV_GOLD10_DROP,
	PRIV_EXP_PCT,
	PRIV_DOUBLE_DROP_COUNT,
	MAX_PRIV_NUM,
};

enum EMoneyLogType
{
	MONEY_LOG_RESERVED,
	MONEY_LOG_MONSTER, // Gold rewarded by monsters
	MONEY_LOG_SHOP,
	MONEY_LOG_REFINE,
	MONEY_LOG_QUEST,
	MONEY_LOG_GUILD,
	MONEY_LOG_MISC, // Gold Steal and GM Set command for gold
	MONEY_LOG_MONSTER_KILL,
	MONEY_LOG_DROP,
	MONEY_LOG_TYPE_MAX_NUM,
};

enum EPremiumTypes
{
	PREMIUM_EXP,		// °æÇèÄ¡°¡ 1.2¹è
	PREMIUM_ITEM,		// ¾ÆÀÌÅÛ µå·ÓÀ²ÀÌ 2¹è
	PREMIUM_SAFEBOX,		// Ã¢°í°¡ 1Ä­¿¡¼­ 3Ä­
	PREMIUM_AUTOLOOT,		// µ· ÀÚµ¿ ÁÝ±â
	PREMIUM_FISH_MIND,		// °í±Þ ¹°°í±â ³¬ÀÏ È®·ü »ó½Â
	PREMIUM_MARRIAGE_FAST,	// ±Ý½Ç Áõ°¡ ¾çÀ» ºü¸£°ÔÇÕ´Ï´Ù.
	PREMIUM_GOLD,		// µ· µå·ÓÀ²ÀÌ 1.5¹è
	PREMIUM_SHOP_DOUBLE_UP,		// Doubles MAX on Activity to => OfflineMinutes.
	PREMIUM_VOTE,
	PREMIUM_MAX_NUM = 10
};

enum SPECIAL_EFFECT
{
	SE_NONE = 0,
	SE_HPUP_RED = 1,
	SE_SPUP_BLUE = 2,
	SE_SPEEDUP_GREEN = 3,
	SE_DXUP_PURPLE = 4,
	SE_CRITICAL = 5,
	SE_PENETRATE = 6,
	SE_BLOCK = 7,
	SE_DODGE = 8,
	SE_CHINA_FIREWORK = 9,
	SE_SPIN_TOP = 10,
	SE_SUCCESS = 11,
	SE_FAIL = 12,
	SE_FR_SUCCESS = 13,
	SE_LEVELUP_ON_14_FOR_GERMANY = 14,
	SE_LEVELUP_UNDER_15_FOR_GERMANY = 15,
	SE_PERCENT_DAMAGE1 = 16,
	SE_PERCENT_DAMAGE2 = 17,
	SE_PERCENT_DAMAGE3 = 18,
	SE_AUTO_HPUP = 19,
	SE_AUTO_SPUP = 20,
	SE_EQUIP_RAMADAN_RING = 21,
	SE_EQUIP_HALLOWEEN_CANDY = 22,
	SE_EQUIP_HAPPINESS_RING = 23,
	SE_EQUIP_LOVE_PENDANT = 24,
	SE_ACCE_ABSORB = 25,
	SE_ACCE_EQUIP = 26,
	SE_ACCE_BACK = 27,
	SE_EASTER_CANDY_EQUIP,
	SE_THUNDER_AREA,
	SE_THUNDER,
	SE_HEAL,
	SE_CAPE_OF_COURAGE,
	SE_CHOCOLATE_PENDANT,
	SE_FEATHER_WALK,
	SE_PEPSI_EVENT,
	SE_DRAGONLAIR_STONE_UNBEATABLE_1,
	SE_DRAGONLAIR_STONE_UNBEATABLE_2,
	SE_DRAGONLAIR_STONE_UNBEATABLE_3,
	SE_BATTLE_POTION,
	SE_REFLECT,
	SE_SKILL_DAMAGE_ZONE,
	SE_SKILL_SAFE_ZONE,
	SE_METEOR,
	SE_BEAD_RAIN,
	SE_ARROW_RAIN,
	SE_FALL_ROCK,
	SE_HORSE_DROP,
	SE_EGG_DROP,
	SE_DEAPO_BOOM,
	SE_FLOWER_EVENT,
	SE_GEM_PENDANT,
	SE_DEFENSE_WAVE_LASER,
	SE_EFFECT_PET_ATTR_CHANGE_NEW_TYPE,
	SE_PET_PAY_SUMMON1,
	SE_SPECAIL_ROULETTE
};

enum EIndexedFlyType
{
	FLY_NONE,
	FLY_EXP,
	FLY_HP_MEDIUM,
	FLY_HP_BIG,
	FLY_SP_SMALL,
	FLY_SP_MEDIUM,
	FLY_SP_BIG,
	FLY_FIREWORK1,
	FLY_FIREWORK2,
	FLY_FIREWORK3,
	FLY_FIREWORK4,
	FLY_FIREWORK5,
	FLY_FIREWORK6,
	FLY_FIREWORK_CHRISTMAS,
	FLY_CHAIN_LIGHTNING,
	FLY_HP_SMALL,
	FLY_SKILL_MUYEONG,
	FLY_QUIVER_ATTACK_NORMAL,
};

enum EDamageType
{
	DAMAGE_TYPE_NONE,
	DAMAGE_TYPE_NORMAL,
	DAMAGE_TYPE_NORMAL_RANGE,
	//스킬
	DAMAGE_TYPE_MELEE,
	DAMAGE_TYPE_RANGE,
	DAMAGE_TYPE_FIRE,
	DAMAGE_TYPE_ICE,
	DAMAGE_TYPE_ELEC,
	DAMAGE_TYPE_MAGIC,
	DAMAGE_TYPE_POISON,
	DAMAGE_TYPE_SPECIAL,
	DAMAGE_TYPE_EARTH,
	DAMAGE_TYPE_BLEEDING,
};

enum EPKModes
{
	PK_MODE_PEACE,
	PK_MODE_REVENGE,
	PK_MODE_FREE,
	PK_MODE_PROTECT,
	PK_MODE_GUILD,
	PK_MODE_MAX_NUM
};

enum EBlockAction
{
	BLOCK_EXCHANGE = (1 << 0),
	BLOCK_PARTY_INVITE = (1 << 1),
	BLOCK_GUILD_INVITE = (1 << 2),
	BLOCK_WHISPER = (1 << 3),
	BLOCK_MESSENGER_INVITE = (1 << 4),
	BLOCK_PARTY_REQUEST = (1 << 5),
	BLOCK_VIEW_EQUIP = (1 << 6),
	BLOCK_VIEW_SHOPS = (1 << 7),
	BLOCK_CHAT = (1 << 8),
	BLOCK_DUEL_REQUEST = (1 << 9),
};

enum QuestInfoFlags
{
	QUEST_SEND_ISBEGIN = (1 << 0),
	QUEST_SEND_TITLE = (1 << 1),  // 30자 까지 
	QUEST_SEND_CLOCK_NAME = (1 << 2),  // 16자 까지		
	QUEST_SEND_CLOCK_VALUE = (1 << 3),
	QUEST_SEND_COUNTER_NAME = (1 << 4),  // 16자 까지	
	QUEST_SEND_COUNTER_VALUE = (1 << 5),
	QUEST_SEND_ICON_FILE = (1 << 6),  // 24자 까지
};

enum
{
	CREATE_TARGET_TYPE_NONE,
	CREATE_TARGET_TYPE_LOCATION,
	CREATE_TARGET_TYPE_CHARACTER,
};

enum PartyLimits // unit : minute
{
	PARTY_ENOUGH_MINUTE_FOR_EXP_BONUS = 60, // 파티 결성 후 60분 후 부터 추가 경험치 보너스
	PARTY_HEAL_COOLTIME_LONG = 60,
	PARTY_HEAL_COOLTIME_SHORT = 30,
	PARTY_MAX_MEMBER = 8,
	PARTY_DEFAULT_RANGE = 5000,
};

enum EPartyRole
{
	PARTY_ROLE_NORMAL,
	PARTY_ROLE_LEADER,
	PARTY_ROLE_ATTACKER,
	PARTY_ROLE_TANKER,
	PARTY_ROLE_BUFFER,
	PARTY_ROLE_SKILL_MASTER,
	PARTY_ROLE_HASTE,
	PARTY_ROLE_DEFENDER,
	PARTY_ROLE_MAX_NUM,
};

enum EPartyExpDistributionModes
{
	PARTY_EXP_DISTRIBUTION_NON_PARITY,
	PARTY_EXP_DISTRIBUTION_PARITY,
	PARTY_EXP_DISTRIBUTION_MAX_NUM
};



enum EGMAllowFlags : int64_t
{
	GM_ALLOW_DROP_PLAYER_ITEM = 1 << 0,
	GM_ALLOW_DROP_GM_ITEM = 1 << 1,
	GM_ALLOW_EXCHANGE_PLAYER_ITEM_TO_GM = 1 << 2,
	GM_ALLOW_EXCHANGE_PLAYER_ITEM_TO_PLAYER = 1 << 3,
	GM_ALLOW_EXCHANGE_GOLD_TO_PLAYER = 1 << 4,
	GM_ALLOW_EXCHANGE_GM_ITEM_TO_GM = 1 << 5,
	GM_ALLOW_EXCHANGE_GM_ITEM_TO_PLAYER = 1 << 6,
	GM_ALLOW_EXCHANGE_GOLD_TO_GM = 1 << 7,
	GM_ALLOW_EXCHANGE_TO_GM = 1 << 8,
	GM_ALLOW_EXCHANGE_TO_PLAYER = 1 << 9,
	GM_ALLOW_EXCHANGE_ANTIGIVE = 1 << 10,
	GM_ALLOW_BUY_PRIVATE_ITEM = 1 << 11,
	GM_ALLOW_CREATE_PRIVATE_SHOP = 1 << 12,
	GM_ALLOW_USE_SAFEBOX = 1 << 13,
	GM_ALLOW_CREATE_PLAYER = 1 << 14,
	GM_ALLOW_DELETE_PLAYER = 1 << 15,
	GM_ALLOW_MODIFY_OTHERS = 1 << 16,
	GM_ALLOW_ADMIN_MANAGER = 1 << 17,
	GM_ALLOW_SPECIAL_NAMES = 1 << 18,
	GM_ALLOW_BUFF_GM_TO_PLAYER = 1 << 19,
	GM_ALLOW_BUFF_PLAYER_TO_GM = 1 << 20,
	GM_ALLOW_PLAYER_GUILD_INVITE = 1 << 21,
	GM_ALLOW_GM_GUILD_INVITE = 1 << 22,
	GM_ALLOW_PLAYER_GROUP_INVITE = 1 << 23,
	GM_ALLOW_GM_GROUP_INVITE = 1 << 24,
	GM_ALLOW_ADD_PLAYER_AS_FRIEND = 1 << 25,
	GM_ALLOW_ADD_GM_AS_FRIEND = 1 << 26,

};

enum eBossHunt
{
	BOSSHUNT_BOSS_VNUM = 6320,
#ifdef BOSSHUNT_EVENT_UPDATE
	BOSSHUNT_BOSS_VNUM2 = 6322,
#endif
};

#ifdef ENABLE_BATTLE_PASS
enum EBattlePassInfo
{
	MISSION_REWARD_COUNT = 3,
};

enum EBattlePassType
{
	MISSION_TYPE_NONE, // 0
	
	MONSTER_KILL, // 1
	PLAYER_KILL, // 2
	
	MONSTER_DAMAGE, // 3
	PLAYER_DAMAGE, // 4
	
	USE_ITEM, // 5
	SELL_ITEM, // 6
	CRAFT_ITEM, // 7
	REFINE_ITEM, // 8
	DESTROY_ITEM, // 9
	COLLECT_ITEM, // 10

	FRY_FISH, // 11
	CATCH_FISH, // 12
	
	SPENT_YANG, // 13
	FARM_YANG, // 14
	
	COMPLETE_DUNGEON, // 15
	COMPLETE_MINIGAME, // 16

	BOSS_KILL,
	METIN_KILL,
        REACH_PLAYTIME,
	
	MISSION_TYPE_MAX,
};
#endif

enum ELanguages
{
    LANGUAGE_GLOBAL,
    LANGUAGE_HU,
    LANGUAGE_PL,
    LANGUAGE_DE,
    LANGUAGE_RO,
    LANGUAGE_TR,
    LANGUAGE_EN,
    LANGUAGE_PT,
    LANGUAGE_IT,
    LANGUAGE_MAX_NUM
};


bool GetPointTypeString(storm::StringRef& s, uint32_t val);
bool GetPointTypeValue(const storm::StringRef& s, uint32_t& val);

bool GetApplyTypeString(storm::StringRef& s, uint32_t val);
bool GetApplyTypeValue(const storm::StringRef& s, uint32_t& val);

bool GetCharTypeString(storm::StringRef& s, uint32_t val);
bool GetCharTypeValue(const storm::StringRef& s, uint32_t& val);

bool GetEmpireString(storm::StringRef& s, uint32_t val);
bool GetEmpireValue(const storm::StringRef& s, uint32_t& val);

bool GetImmuneFlagsString(storm::String& s, uint32_t val);
bool GetImmuneFlagsValue(const storm::String& s, uint32_t& val);

bool GetGMLanguageFlagsString(storm::String& s, uint32_t val);
bool GetGMLanguageFlagsValue(const storm::String& s, uint32_t& val);

bool GetPartString(storm::StringRef& s, uint32_t val);
bool GetPartValue(const storm::StringRef& s, uint32_t& val);

bool GetJobString(storm::StringRef& s, uint32_t val);
bool GetJobValue(const storm::StringRef& s, uint32_t& val);

bool GetMainRaceString(storm::StringRef& s, uint32_t val);
bool GetMainRaceValue(const storm::StringRef& s, uint32_t& val);

/// Get the EJob value from a given MainRace
///
/// @return A EJob value representing the job of the given race
///         or JOB_MAX_NUM in case of failure.
uint32_t GetJobByRace(uint32_t race);

/// Get the ESex value from a given MainRace
///
/// @return A ESex value representing the gender of the given race
///         or SEX_COUNT in case of failure.
uint32_t GetSexByRace(uint32_t race);

uint8_t GetLanguageIDByName(const std::string &lang);
std::optional<std::string> GetLanguageNameByID(uint8_t code);
std::optional<std::string> GetLangDisplayName(uint8_t code);

#endif
