#ifndef METIN2_GAME_MOTIONCONSTANTS_HPP
#define METIN2_GAME_MOTIONCONSTANTS_HPP


#pragma once
#include <cstdint>
#include <storm/String.hpp>
#include <game/Constants.hpp>
#include <game/length.h>
#include <game/SkillConstants.hpp>

enum MotionLimits
{
	MOTION_EVENT_MAX_NUM = 50,
};

enum EType
{
	MOTION_TYPE_NONE,
	MOTION_TYPE_WAIT,
	MOTION_TYPE_MOVE,
	MOTION_TYPE_ATTACK,
	MOTION_TYPE_COMBO,
	MOTION_TYPE_DAMAGE,
	MOTION_TYPE_KNOCKDOWN,
	MOTION_TYPE_DIE,
	MOTION_TYPE_SKILL,
	MOTION_TYPE_STANDUP,
	MOTION_TYPE_EVENT,
	MOTION_TYPE_EMOTION,
	MOTION_TYPE_FISHING,
	MOTION_TYPE_NUM,
};

enum EMode
{
	MOTION_MODE_RESERVED,
	MOTION_MODE_GENERAL,

	MOTION_MODE_ONEHAND_SWORD,
	MOTION_MODE_TWOHAND_SWORD,
	MOTION_MODE_DUALHAND_SWORD,
	MOTION_MODE_BOW,
	MOTION_MODE_FAN,
	MOTION_MODE_BELL,
	MOTION_MODE_CLAW,

	MOTION_MODE_FISHING,
	MOTION_MODE_WEDDING_DRESS,

	MOTION_MODE_HORSE,
	MOTION_MODE_HORSE_ONEHAND_SWORD,
	MOTION_MODE_HORSE_TWOHAND_SWORD,
	MOTION_MODE_HORSE_DUALHAND_SWORD,
	MOTION_MODE_HORSE_BOW,
	MOTION_MODE_HORSE_FAN,
	MOTION_MODE_HORSE_BELL,
	MOTION_MODE_HORSE_CLAW,

	MOTION_MODE_MAX_NUM,
};

enum EName
{
	MOTION_NONE,                // 0 없음
	MOTION_WAIT,                // 1 대기          (00.msa)
	MOTION_WALK,                // 2 걷기          (02.msa)
	MOTION_RUN,                 // 3 뛰기          (03.msa)
	MOTION_CHANGE_WEAPON,       // 4 무기바꾸기
	MOTION_DAMAGE,              // 5 정면맞기      (30.msa)
	MOTION_DAMAGE_FLYING,       // 6 정면날아가기  (32.msa)
	MOTION_STAND_UP,            // 7 정면일어나기  (33.msa)
	MOTION_DAMAGE_BACK,         // 8 후면맞기      (34.msa)
	MOTION_DAMAGE_FLYING_BACK,  // 9 후면날아가기  (35.msa)
	MOTION_STAND_UP_BACK,       // 10 후면일어나기 (36.msa)
	MOTION_DEAD,                // 11 죽기         (31.msa)
	MOTION_DEAD_BACK,           // 12 후면죽기     (37.msa)
	MOTION_NORMAL_ATTACK,       // 13 공격         (20.msa)
	MOTION_COMBO_ATTACK_1,      // 14 콤보 공격
	MOTION_COMBO_ATTACK_2,      // 15 콤보 공격
	MOTION_COMBO_ATTACK_3,      // 16 콤보 공격
	MOTION_COMBO_ATTACK_4,      // 17 콤보 공격
	MOTION_COMBO_ATTACK_5,      // 18 콤보 공격
	MOTION_COMBO_ATTACK_6,      // 19 콤보 공격
	MOTION_COMBO_ATTACK_7,      // 20 콤보 공격
	MOTION_COMBO_ATTACK_8,      // 21 콤보 공격
	MOTION_INTRO_WAIT,          // 22 선택화면 대기
	MOTION_INTRO_SELECTED,      // 23 선택화면 선택
	MOTION_INTRO_NOT_SELECTED,  // 24 선택화면 비선택
	MOTION_SPAWN,               // 25 소환
	MOTION_FISHING_THROW,       // 26 낚시 던지기
	MOTION_FISHING_WAIT,        // 27 낚시 대기
	MOTION_FISHING_STOP,        // 28 낚시 그만두기
	MOTION_FISHING_REACT,       // 29 낚시 반응
	MOTION_FISHING_CATCH,       // 30 낚시 잡기
	MOTION_FISHING_FAIL,        // 31 낚시 실패
	MOTION_STOP,                // 32 말 멈추기
	MOTION_SPECIAL_1,           // 33 몬스터/NPC 특수 동작 (24.msa)
	MOTION_SPECIAL_2,           // 34 몬스터/NPC 특수 동작 (25.msa)
	MOTION_SPECIAL_3,
	MOTION_SPECIAL_4,
	MOTION_SPECIAL_5,
	MOTION_SPECIAL_6,

	// PUBLIC_MOTION_END,

	MOTION_SKILL = 50,
	MOTION_SKILL_END = MOTION_SKILL + SKILL_MAX_NUM,

	// CLAP
	MOTION_CLAP,

	// CHEERS
	MOTION_CHEERS_1,
	MOTION_CHEERS_2,

	// KISS
	MOTION_KISS_START,
	MOTION_KISS_WITH_WARRIOR = MOTION_KISS_START + 0,
	MOTION_KISS_WITH_ASSASSIN = MOTION_KISS_START + 1,
	MOTION_KISS_WITH_SURA = MOTION_KISS_START + 2,
	MOTION_KISS_WITH_SHAMAN = MOTION_KISS_START + 3,
	MOTION_KISS_WITH_WOLFMAN = MOTION_KISS_START + 4,

	// FRENCH_KISS
	MOTION_FRENCH_KISS_START,
	MOTION_FRENCH_KISS_WITH_WARRIOR = MOTION_FRENCH_KISS_START + 0,
	MOTION_FRENCH_KISS_WITH_ASSASSIN = MOTION_FRENCH_KISS_START + 1,
	MOTION_FRENCH_KISS_WITH_SURA = MOTION_FRENCH_KISS_START + 2,
	MOTION_FRENCH_KISS_WITH_SHAMAN = MOTION_FRENCH_KISS_START + 3,
	MOTION_FRENCH_KISS_WITH_WOLFMAN = MOTION_FRENCH_KISS_START + 4,

	// SLAP
	MOTION_SLAP_HIT_START,
	MOTION_SLAP_HIT_WITH_WARRIOR = MOTION_SLAP_HIT_START + 0,
	MOTION_SLAP_HIT_WITH_ASSASSIN = MOTION_SLAP_HIT_START + 1,
	MOTION_SLAP_HIT_WITH_SURA = MOTION_SLAP_HIT_START + 2,
	MOTION_SLAP_HIT_WITH_SHAMAN = MOTION_SLAP_HIT_START + 3,
	MOTION_SLAP_HIT_WITH_WOLFMAN = MOTION_SLAP_HIT_START + 4,

	MOTION_SLAP_HURT_START,
	MOTION_SLAP_HURT_WITH_WARRIOR = MOTION_SLAP_HURT_START + 0,
	MOTION_SLAP_HURT_WITH_ASSASSIN = MOTION_SLAP_HURT_START + 1,
	MOTION_SLAP_HURT_WITH_SURA = MOTION_SLAP_HURT_START + 2,
	MOTION_SLAP_HURT_WITH_SHAMAN = MOTION_SLAP_HURT_START + 3,
	MOTION_SLAP_HURT_WITH_WOLFMAN = MOTION_SLAP_HURT_START + 4,

	MOTION_DIG,

	MOTION_DANCE_1,
	MOTION_DANCE_2,
	MOTION_DANCE_3,
	MOTION_DANCE_4,
	MOTION_DANCE_5,
	MOTION_DANCE_6,		// 강남스타일
	MOTION_DANCE_7,
	MOTION_EMOTION_PUSH_UP,
	MOTION_EMOTION_DANCE_7,
	MOTION_EMOTION_EXERCISE,
	MOTION_EMOTION_DOZE,
	MOTION_EMOTION_SELFIE,
	MOTION_EMOTION_CHARGING,
	MOTION_EMOTION_NOSAY,
	MOTION_EMOTION_WEATHER_1,
	MOTION_EMOTION_WEATHER_2,
	MOTION_EMOTION_WEATHER_3,
	MOTION_EMOTION_HUNGRY,
	MOTION_EMOTION_SIREN,
	MOTION_EMOTION_LETTER,
	MOTION_EMOTION_CALL,
	MOTION_EMOTION_CELEBRATION,
	MOTION_EMOTION_ALCOHOL,
	MOTION_EMOTION_BUSY,
	MOTION_CONGRATULATION,
	MOTION_FORGIVE,
	MOTION_ANGRY,
	MOTION_ATTRACTIVE,
	MOTION_SAD,
	MOTION_SHY,
	MOTION_CHEERUP,
	MOTION_BANTER,
	MOTION_JOY,
	MOTION_THROW_MONEY,

	MOTION_MAX_NUM,
};

enum EMotionEventType
{
	MOTION_EVENT_TYPE_NONE,

	MOTION_EVENT_TYPE_EFFECT,
	MOTION_EVENT_TYPE_SCREEN_WAVING,
	MOTION_EVENT_TYPE_SCREEN_FLASHING,
	MOTION_EVENT_TYPE_SPECIAL_ATTACKING,
	MOTION_EVENT_TYPE_SOUND,
	MOTION_EVENT_TYPE_FLY,
	MOTION_EVENT_TYPE_CHARACTER_SHOW,
	MOTION_EVENT_TYPE_CHARACTER_HIDE,
	MOTION_EVENT_TYPE_WARP,
	MOTION_EVENT_TYPE_EFFECT_TO_TARGET,
	MOTION_EVENT_TYPE_RELATIVE_MOVE_ON,
	MOTION_EVENT_TYPE_RELATIVE_MOVE_OFF,
	
	MOTION_EVENT_TYPE_MAX_NUM,
};

bool GetMotionModeString(storm::StringRef& s, uint32_t val);
bool GetMotionModeValue(const storm::StringRef& s, uint32_t& val);

bool GetMotionString(storm::StringRef& s, uint32_t val);
bool GetMotionValue(const storm::StringRef& s, uint32_t& val);



#endif
