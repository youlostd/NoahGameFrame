#include "StdAfx.h"
#include "GameType.h"
#include "../EterLib/ResourceManager.h"
#include <game/MotionConstants.hpp>

std::string g_strResourcePath = "d:/ymir work/";
std::string g_strImagePath = "d:/ymir work/ui/";

std::string g_strGuildSymbolPathName = "mark/10/";

void SetGuildSymbolPath(const char *c_szPathName)
{
    g_strGuildSymbolPathName = "mark/";
    g_strGuildSymbolPathName += c_szPathName;
    g_strGuildSymbolPathName += "/";
}

const char *GetGuildSymbolFileName(uint32_t dwGuildID)
{
    return _getf("%s%03d.jpg", g_strGuildSymbolPathName.c_str(), dwGuildID);
}

std::unordered_map<ESlotType, EWindows> slotTypeToInvenType = {
    {SLOT_TYPE_NONE, RESERVED_WINDOW},
    {SLOT_TYPE_INVENTORY, INVENTORY},
    {SLOT_TYPE_SKILL, RESERVED_WINDOW},
    {SLOT_TYPE_EMOTION, RESERVED_WINDOW},
    {SLOT_TYPE_SHOP, NPC_SHOP},
    {SLOT_TYPE_EXCHANGE_OWNER, RESERVED_WINDOW},
    {SLOT_TYPE_EXCHANGE_TARGET, RESERVED_WINDOW},
    {SLOT_TYPE_QUICK_SLOT, RESERVED_WINDOW},
    {SLOT_TYPE_SAFEBOX, SAFEBOX},
    {SLOT_TYPE_PRIVATE_SHOP, PC_SHOP},
    {SLOT_TYPE_ACCE, ACCEREFINE},
    {SLOT_TYPE_MALL, MALL},
    {SLOT_TYPE_DRAGON_SOUL_INVENTORY, DRAGON_SOUL_INVENTORY},
    {SLOT_TYPE_MYSHOP, PC_SHOP},
#ifdef ENABLE_GUILD_STORAGE
	{	SLOT_TYPE_GUILDSTORAGE,	GUILDSTORAGE },
#endif
#ifdef __OFFLINE_SHOP__
    {SLOT_TYPE_OFFLINE_SHOP, OFFLINE_SHOP},
#endif
    {SLOT_TYPE_CHANGE_LOOK, CHANGELOOK},

};

uint8_t SlotTypeToInvenType(uint8_t bSlotType)
{
    if (bSlotType >= SLOT_TYPE_MAX)
        return RESERVED_WINDOW;

    auto it = slotTypeToInvenType.find(static_cast<ESlotType>(bSlotType));
    if (it == slotTypeToInvenType.end())
        return RESERVED_WINDOW;

    return it->second;
}

uint8_t WindowTypeToSlotType(uint8_t bWindowType)
{
    if (bWindowType >= WINDOW_TYPE_MAX)
        return SLOT_TYPE_NONE;

    auto it = std::find_if(std::begin(slotTypeToInvenType), std::end(slotTypeToInvenType),
                           [bWindowType](auto &p)
                           {
                               return p.second == bWindowType;
                           });

    if (it == slotTypeToInvenType.end())
        return SLOT_TYPE_NONE;

    return it->first;
}



struct ApplyInfo
{
    uint8_t applyType;
    uint8_t pointType;
};

const ApplyInfo kApplyPointMapping[] = {
    {APPLY_NONE, POINT_NONE},
    {APPLY_MAX_HP, POINT_MAX_HP},
    {APPLY_MAX_SP, POINT_MAX_SP},
    {APPLY_CON, POINT_HT},
    {APPLY_INT, POINT_IQ},
    {APPLY_STR, POINT_ST},
    {APPLY_DEX, POINT_DX},
    {APPLY_ATT_SPEED, POINT_ATT_SPEED},
    {APPLY_MOV_SPEED, POINT_MOV_SPEED},
    {APPLY_CAST_SPEED, POINT_CASTING_SPEED},
    {APPLY_HP_REGEN, POINT_HP_REGEN},
    {APPLY_SP_REGEN, POINT_SP_REGEN},
    {APPLY_POISON_PCT, POINT_POISON_PCT},
    {APPLY_STUN_PCT, POINT_STUN_PCT},
    {APPLY_SLOW_PCT, POINT_SLOW_PCT},
    {APPLY_CRITICAL_PCT, POINT_CRITICAL_PCT},
    {APPLY_PENETRATE_PCT, POINT_PENETRATE_PCT},
    {APPLY_ATTBONUS_HUMAN, POINT_ATTBONUS_HUMAN},
    {APPLY_ATTBONUS_ANIMAL, POINT_ATTBONUS_ANIMAL},
    {APPLY_ATTBONUS_ORC, POINT_ATTBONUS_ORC},
    {APPLY_ATTBONUS_MILGYO, POINT_ATTBONUS_MILGYO},
    {APPLY_ATTBONUS_UNDEAD, POINT_ATTBONUS_UNDEAD},
    {APPLY_ATTBONUS_DEVIL, POINT_ATTBONUS_DEVIL},
    {APPLY_STEAL_HP, POINT_STEAL_HP},
    {APPLY_STEAL_SP, POINT_STEAL_SP},
    {APPLY_MANA_BURN_PCT, POINT_MANA_BURN_PCT},
    {APPLY_DAMAGE_SP_RECOVER, POINT_DAMAGE_SP_RECOVER},
    {APPLY_BLOCK, POINT_BLOCK},
    {APPLY_DODGE, POINT_DODGE},
    {APPLY_RESIST_SWORD, POINT_RESIST_SWORD},
    {APPLY_RESIST_TWOHAND, POINT_RESIST_TWOHAND},
    {APPLY_RESIST_DAGGER, POINT_RESIST_DAGGER},
    {APPLY_RESIST_BELL, POINT_RESIST_BELL},
    {APPLY_RESIST_FAN, POINT_RESIST_FAN},
    {APPLY_RESIST_BOW, POINT_RESIST_BOW},
    {APPLY_RESIST_FIRE, POINT_RESIST_FIRE},
    {APPLY_RESIST_ELEC, POINT_RESIST_ELEC},
    {APPLY_RESIST_MAGIC, POINT_RESIST_MAGIC},
    {APPLY_RESIST_WIND, POINT_RESIST_WIND},
    {APPLY_REFLECT_MELEE, POINT_REFLECT_MELEE},
    {APPLY_REFLECT_CURSE, POINT_REFLECT_CURSE},
    {APPLY_POISON_REDUCE, POINT_POISON_REDUCE},
    {APPLY_KILL_SP_RECOVER, POINT_KILL_SP_RECOVER},
    {APPLY_EXP_DOUBLE_BONUS, POINT_EXP_DOUBLE_BONUS},
    {APPLY_GOLD_DOUBLE_BONUS, POINT_GOLD_DOUBLE_BONUS},
    {APPLY_ITEM_DROP_BONUS, POINT_ITEM_DROP_BONUS},
    {APPLY_POTION_BONUS, POINT_POTION_BONUS},
    {APPLY_KILL_HP_RECOVER, POINT_KILL_HP_RECOVERY},
    {APPLY_IMMUNE_STUN, POINT_IMMUNE_STUN},
    {APPLY_IMMUNE_SLOW, POINT_IMMUNE_SLOW},
    {APPLY_IMMUNE_FALL, POINT_IMMUNE_FALL},
    {APPLY_SKILL, POINT_NONE},
    {APPLY_BOW_DISTANCE, POINT_BOW_DISTANCE},
    {APPLY_ATT_GRADE_BONUS, POINT_ATT_GRADE_BONUS},
    {APPLY_DEF_GRADE_BONUS, POINT_DEF_GRADE_BONUS},
    {APPLY_MAGIC_ATT_GRADE, POINT_MAGIC_ATT_GRADE_BONUS},
    {APPLY_MAGIC_DEF_GRADE, POINT_MAGIC_DEF_GRADE_BONUS},
    {APPLY_CURSE_PCT, POINT_CURSE_PCT},
    {APPLY_MAX_STAMINA, POINT_MAX_STAMINA},
    {APPLY_ATTBONUS_WARRIOR, POINT_ATTBONUS_WARRIOR},
    {APPLY_ATTBONUS_ASSASSIN, POINT_ATTBONUS_ASSASSIN},
    {APPLY_ATTBONUS_SURA, POINT_ATTBONUS_SURA},
    {APPLY_ATTBONUS_SHAMAN, POINT_ATTBONUS_SHAMAN},
    {APPLY_ATTBONUS_MONSTER, POINT_ATTBONUS_MONSTER},
    {APPLY_MALL_ATTBONUS, POINT_MALL_ATTBONUS},
    {APPLY_MALL_DEFBONUS, POINT_MALL_DEFBONUS},
    {APPLY_MALL_EXPBONUS, POINT_MALL_EXPBONUS},
    {APPLY_MALL_ITEMBONUS, POINT_MALL_ITEMBONUS},
    {APPLY_MALL_GOLDBONUS, POINT_MALL_GOLDBONUS},
    {APPLY_MAX_HP_PCT, POINT_MAX_HP_PCT},
    {APPLY_MAX_SP_PCT, POINT_MAX_SP_PCT},
    {APPLY_SKILL_DAMAGE_BONUS, POINT_SKILL_DAMAGE_BONUS},
    {APPLY_NORMAL_HIT_DAMAGE_BONUS, POINT_NORMAL_HIT_DAMAGE_BONUS},

    {APPLY_SKILL_DEFEND_BONUS, POINT_SKILL_DEFEND_BONUS},
    {APPLY_NORMAL_HIT_DEFEND_BONUS, POINT_NORMAL_HIT_DEFEND_BONUS},

    {APPLY_PC_BANG_EXP_BONUS, POINT_PC_BANG_EXP_BONUS},
    {APPLY_PC_BANG_DROP_BONUS, POINT_PC_BANG_DROP_BONUS},

    {APPLY_EXTRACT_HP_PCT, POINT_NONE},

    {APPLY_RESIST_WARRIOR, POINT_RESIST_WARRIOR},
    {APPLY_RESIST_ASSASSIN, POINT_RESIST_ASSASSIN},
    {APPLY_RESIST_SURA, POINT_RESIST_SURA},
    {APPLY_RESIST_SHAMAN, POINT_RESIST_SHAMAN},
    {APPLY_ENERGY, POINT_ENERGY},
    {APPLY_DEF_GRADE, POINT_DEF_GRADE},
    {APPLY_COSTUME_ATTR_BONUS, POINT_COSTUME_ATTR_BONUS},
    {APPLY_MAGIC_ATTBONUS_PER, POINT_MAGIC_ATT_BONUS_PER},
    {APPLY_MELEE_MAGIC_ATTBONUS_PER, POINT_MELEE_MAGIC_ATT_BONUS_PER},
    {APPLY_RESIST_ICE, POINT_RESIST_ICE},
    {APPLY_RESIST_EARTH, POINT_RESIST_EARTH},
    {APPLY_RESIST_DARK, POINT_RESIST_DARK},
    {APPLY_ANTI_CRITICAL_PCT, POINT_RESIST_CRITICAL},
    {APPLY_ANTI_PENETRATE_PCT, POINT_RESIST_PENETRATE},
    {APPLY_BOOST_CRITICAL_DMG, POINT_BOOST_CRITICAL},
    {APPLY_BOOST_PENETRATE_DMG, POINT_BOOST_PENETRATE},
    {APPLY_ATTBONUS_INSECT, POINT_ATTBONUS_INSECT},
    {APPLY_BLEEDING_REDUCE, POINT_BLEEDING_REDUCE},
    {APPLY_BLEEDING_PCT, POINT_BLEEDING_PCT},
    {APPLY_ATTBONUS_WOLFMAN, POINT_ATTBONUS_WOLFMAN},
    {APPLY_RESIST_WOLFMAN, POINT_RESIST_WOLFMAN},
    {APPLY_RESIST_CLAW, POINT_RESIST_CLAW},
    {APPLY_ACCEDRAIN_RATE, POINT_NONE},
    {APPLY_ATTBONUS_METIN, POINT_ATTBONUS_METIN},
    {APPLY_ATTBONUS_TRENT, POINT_ATTBONUS_TRENT},
    {APPLY_ATTBONUS_BOSS, POINT_ATTBONUS_BOSS},
    {APPLY_RESIST_HUMAN, POINT_RESIST_HUMAN},
    {APPLY_ENCHANT_ELECT, POINT_ENCHANT_ELECT},
    {APPLY_ENCHANT_FIRE, POINT_ENCHANT_FIRE},
    {APPLY_ENCHANT_ICE, POINT_ENCHANT_ICE},
    {APPLY_ENCHANT_WIND, POINT_ENCHANT_WIND},
    {APPLY_ENCHANT_EARTH, POINT_ENCHANT_EARTH},
    {APPLY_ENCHANT_DARK, POINT_ENCHANT_DARK},
    {APPLY_ATTBONUS_CZ, POINT_ATTBONUS_CZ},
    {APPLY_ATTBONUS_DESERT, POINT_ATTBONUS_DESERT},

};

uint8_t GetApplyPoint(uint8_t applyType)
{
    for (const auto &mapping : kApplyPointMapping)
    {
        if (mapping.applyType == applyType)
            return mapping.pointType;
    }

    return POINT_NONE;
}

uint8_t GetPointApply(uint8_t pointType)
{
    for (const auto &mapping : kApplyPointMapping)
    {
        if (mapping.pointType == pointType)
            return mapping.applyType;
    }

    return APPLY_NONE;
}
